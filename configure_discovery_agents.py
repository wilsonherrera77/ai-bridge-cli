#!/usr/bin/env python3
"""
Configurar agentes aut√≥nomos para motor de descubrimiento en tiempo real
Sistema de autonom√≠a M√ÅXIMA - Los agentes persiguen el objetivo sin l√≠mites
"""

import requests
import json
import time
import sys
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

BACKEND_URL = "http://localhost:8000"

def wait_for_backend():
    """Esperar que el backend est√© disponible"""
    max_attempts = 30
    for attempt in range(max_attempts):
        try:
            response = requests.get(f"{BACKEND_URL}/health", timeout=5)
            if response.status_code == 200:
                logger.info("‚úÖ Backend est√° disponible")
                return True
        except requests.exceptions.RequestException:
            if attempt < max_attempts - 1:
                logger.info(f"‚è≥ Esperando backend... (intento {attempt + 1}/{max_attempts})")
                time.sleep(2)
            else:
                logger.error("‚ùå Backend no disponible despu√©s de esperar")
                return False
    return False

def start_orchestration():
    """Iniciar orquestaci√≥n con objetivo del motor de descubrimiento"""
    
    discovery_objective = """
üéØ CONSTRUIR MOTOR DE DESCUBRIMIENTO EN TIEMPO REAL

OBJETIVO PRINCIPAL:
Crear un sistema avanzado que ingiera hojas Excel con temas/consultas, expanda b√∫squedas m√°s all√° de semillas, rastree con profundidad configurable, extraiga metadatos, canonice/deduplique y ejecute continuamente.

ESPECIFICACIONES T√âCNICAS:

üìä ENTRADA - HOJA EXCEL:
- Columnas: topic, query?, platform?, seed_url?, account?, lang?, region?, depth?, recency_days?
- Procesamiento robusto con validaci√≥n y normalizaci√≥n

üîç PROVIDERS MODULARES:
- Interfaz abstracta para enchufar nuevas fuentes
- Implementar: B√∫squeda web general, RSS, Reddit, YouTube, X/Twitter
- Concurrencia configurable, retries, l√≠mites por dominio

üï∑Ô∏è MOTOR DE CRAWLING:
- Profundidad configurable por topic
- Expansi√≥n m√°s all√° de semillas iniciales  
- Extraer: title, text, author, published_at, domain
- Sistema de normalizaci√≥n y limpieza de datos

üßπ CANONIZACI√ìN Y DEDUPLICACI√ìN:
- Algoritmos de similarity para evitar duplicados
- Persistencia entre rondas de ejecuci√≥n
- Hash content-based + URL canonicalization

üìä SISTEMA DE SCORING:
- Relevancia (similarity con query/topic)
- Recencia (peso temporal configurable)
- Diversidad (evitar over-representation de dominios)

üíª CLI INTERFACE:
--excel [archivo]
--continuous [true/false]  
--interval [minutos]
--max-per-topic [n√∫mero]
--max-crawl-per-domain [n√∫mero]
--depth [niveles]
--output-format [jsonl/csv/sqlite/excel]
--output-destination [ruta]

üì§ FORMATOS DE SALIDA:
- JSONL para streaming
- CSV para an√°lisis 
- SQLite para queries
- Excel resumen ejecutivo
- Destinos configurables (local/remoto)

üîÑ EJECUCI√ìN CONTINUA:
- Scheduler configurable por intervalos
- Estado persistente entre ejecuciones
- Logs detallados y monitoreo

‚úÖ CRITERIOS DE ACEPTACI√ìN:
1. CLI funcional con todos los par√°metros
2. Excel de ejemplo funcional 
3. Descubrimiento m√°s all√° de semillas
4. Cero duplicados entre rondas
5. Salidas estructuradas en todos los formatos
6. Logs claros y informativos
7. Pruebas para normalizaci√≥n/deduplicaci√≥n/scoring

AUTONOM√çA: M√ÅXIMA
- Implementar soluci√≥n COMPLETA y ROBUSTA
- Est√°ndares enterprise-grade
- C√≥digo production-ready
- Documentaci√≥n t√©cnica exhaustiva
- Manejo de errores comprehensivo
"""

    config = {
        "autonomy_level": "MAX",  # AUTONOM√çA M√ÅXIMA
        "objective": discovery_objective,
        "workspace": "discovery_engine",
        "continuous_mode": True,
        "max_rounds": None,  # SIN L√çMITES
        "require_human_approval": False,
        "agents_config": {
            "frontend_cli": "claude",
            "backend_cli": "claude" 
        },
        "execution_mode": "autonomous",
        "completion_criteria": "objective_fully_achieved"
    }
    
    try:
        response = requests.post(
            f"{BACKEND_URL}/api/orchestration/start",
            json=config,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            session_id = result.get('session_id')
            logger.info(f"üöÄ ORQUESTACI√ìN INICIADA - Sesi√≥n: {session_id}")
            logger.info("‚ö° AUTONOM√çA M√ÅXIMA ACTIVADA")
            logger.info("üéØ Objetivo: Motor de Descubrimiento en Tiempo Real")
            logger.info("ü§ñ Los agentes trabajar√°n SIN L√çMITES hasta completar el objetivo")
            return session_id
        else:
            logger.error(f"‚ùå Error iniciando orquestaci√≥n: {response.status_code}")
            logger.error(f"Respuesta: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå Error de conexi√≥n: {e}")
        return None

def monitor_session(session_id):
    """Monitorear progreso de la sesi√≥n"""
    logger.info(f"üìä Monitoreando sesi√≥n: {session_id}")
    
    while True:
        try:
            response = requests.get(f"{BACKEND_URL}/api/orchestration/status/{session_id}")
            
            if response.status_code == 200:
                status = response.json()
                state = status.get('state', 'unknown')
                phase = status.get('current_phase', 'unknown')
                
                logger.info(f"üìà Estado: {state} | Fase: {phase}")
                
                if state in ['completed', 'failed', 'cancelled']:
                    logger.info(f"üèÅ Sesi√≥n terminada: {state}")
                    break
                    
            time.sleep(10)  # Check every 10 seconds
            
        except KeyboardInterrupt:
            logger.info("üõë Monitoreo interrumpido por usuario")
            break
        except Exception as e:
            logger.error(f"‚ùå Error monitoreando: {e}")
            time.sleep(5)

def main():
    logger.info("üöÄ INICIANDO SISTEMA DE AUTONOM√çA M√ÅXIMA")
    logger.info("üéØ Objetivo: Motor de Descubrimiento en Tiempo Real")
    
    # Esperar backend
    if not wait_for_backend():
        sys.exit(1)
    
    # Iniciar orquestaci√≥n
    session_id = start_orchestration()
    if not session_id:
        sys.exit(1)
    
    # Monitorear progreso
    monitor_session(session_id)

if __name__ == "__main__":
    main()