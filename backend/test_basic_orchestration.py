#!/usr/bin/env python3
"""
Prueba b√°sica del sistema de orquestaci√≥n
Objetivo: Hacer que 2 agentes Claude CLI puedan dialogar
"""

import asyncio
import logging
import sys
from pathlib import Path

# A√±adir backend al path
sys.path.insert(0, str(Path(__file__).parent))

from orchestrator import AgentOrchestrator, OrchestrationConfig

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

async def test_basic_orchestration():
    """Prueba b√°sica: 2 agentes Claude CLI dialogando"""
    
    logger.info("üöÄ Iniciando prueba b√°sica de orquestaci√≥n")
    
    # Configuraci√≥n b√°sica para di√°logo
    config = OrchestrationConfig(
        autonomy_level="MEDIUM",  # Empezar con nivel medio
        max_iterations=5,        # L√≠mite para prueba
        workspace_dir="test_workspace"
    )
    
    # Crear orquestador
    orchestrator = AgentOrchestrator(config)
    
    # Objetivo simple: hacer que dialoguen
    objective = """
    Objetivo de prueba: Los dos agentes deben presentarse y tener una breve conversaci√≥n.
    
    AgentA (Frontend): Pres√©ntate como especialista frontend
    AgentB (Backend): Pres√©ntate como especialista backend
    
    Luego tengan un di√°logo b√°sico sobre c√≥mo colaborar.
    """
    
    try:
        # Iniciar sesi√≥n de orquestaci√≥n
        session_id = await orchestrator.start_orchestration(objective, config)
        logger.info(f"‚úÖ Sesi√≥n iniciada: {session_id}")
        
        # El orchestrador deber√≠a manejar el di√°logo autom√°ticamente
        logger.info("ü§ñ Agentes iniciando di√°logo aut√≥nomo...")
        
        # Esperar un poco para ver si funciona
        await asyncio.sleep(10)
        
        logger.info("‚úÖ Prueba b√°sica completada")
        
    except Exception as e:
        logger.error(f"‚ùå Error en orquestaci√≥n: {e}")
        return False
    
    return True

if __name__ == "__main__":
    asyncio.run(test_basic_orchestration())